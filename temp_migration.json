{
  "query": "-- Complete Agency Members Management Fix\n-- This migration fixes roles and creates all necessary functions\n\n-- Step 1: Clean up any non-conforming roles\nUPDATE public.user_agencies\nSET role = 'agent'\nWHERE role NOT IN ('owner', 'admin', 'agent');\n\n-- Step 2: Add role constraint if it doesn't exist\nDO $$\nBEGIN\n    IF NOT EXISTS (\n        SELECT 1 FROM pg_constraint\n        WHERE conname = 'user_agencies_role_check'\n    ) THEN\n        ALTER TABLE public.user_agencies\n        ADD CONSTRAINT user_agencies_role_check\n        CHECK (role IN ('owner', 'admin', 'agent'));\n    END IF;\nEND $$;\n\n-- Step 3: Create RPC to look up user ID by email\nCREATE OR REPLACE FUNCTION public.get_user_id_by_email(p_email text)\nRETURNS uuid\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = ''\nAS $$\nDECLARE\n  v_user_id uuid;\nBEGIN\n  -- First try profiles table\n  SELECT id INTO v_user_id\n  FROM public.profiles\n  WHERE lower(email) = lower(p_email)\n  LIMIT 1;\n\n  -- If not found in profiles, try auth.identities\n  IF v_user_id IS NULL THEN\n    SELECT user_id INTO v_user_id\n    FROM auth.identities\n    WHERE lower(email) = lower(p_email)\n    ORDER BY created_at DESC\n    LIMIT 1;\n  END IF;\n\n  RETURN v_user_id;\nEND;\n$$;\n\n-- Step 4: Create RPC to add user to agency (with permission checks)\nCREATE OR REPLACE FUNCTION public.add_user_to_agency(\n  p_agency uuid,\n  p_user uuid,\n  p_role text DEFAULT 'agent'\n)\nRETURNS void\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = ''\nAS $$\nDECLARE\n  v_is_authorized boolean;\nBEGIN\n  -- Validate role\n  IF p_role NOT IN ('admin', 'agent') THEN\n    RAISE EXCEPTION 'Invalid role. Must be admin or agent';\n  END IF;\n\n  -- Check if caller has permission (is admin/owner of the agency)\n  SELECT EXISTS(\n    SELECT 1 FROM public.agencies\n    WHERE id = p_agency\n    AND owner_user_id = auth.uid()\n  ) OR EXISTS(\n    SELECT 1 FROM public.user_agencies\n    WHERE agency_id = p_agency\n    AND user_id = auth.uid()\n    AND role IN ('admin', 'owner')\n  ) INTO v_is_authorized;\n\n  IF NOT v_is_authorized THEN\n    RAISE EXCEPTION 'You do not have permission to manage this agency';\n  END IF;\n\n  -- Check if user already exists in agency\n  IF EXISTS (\n    SELECT 1 FROM public.user_agencies\n    WHERE user_id = p_user\n    AND agency_id = p_agency\n  ) THEN\n    -- Update existing role\n    UPDATE public.user_agencies\n    SET role = p_role,\n        updated_at = now()\n    WHERE user_id = p_user\n    AND agency_id = p_agency;\n  ELSE\n    -- Insert new membership\n    INSERT INTO public.user_agencies (user_id, agency_id, role, created_at)\n    VALUES (p_user, p_agency, p_role, now());\n  END IF;\nEND;\n$$;\n\n-- Step 5: Create RPC to remove user from agency (with last admin protection)\nCREATE OR REPLACE FUNCTION public.remove_user_from_agency(\n  p_agency uuid,\n  p_user uuid\n)\nRETURNS void\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = ''\nAS $$\nDECLARE\n  v_is_authorized boolean;\n  v_admin_count integer;\n  v_user_role text;\nBEGIN\n  -- Check if caller has permission\n  SELECT EXISTS(\n    SELECT 1 FROM public.agencies\n    WHERE id = p_agency\n    AND owner_user_id = auth.uid()\n  ) OR EXISTS(\n    SELECT 1 FROM public.user_agencies\n    WHERE agency_id = p_agency\n    AND user_id = auth.uid()\n    AND role IN ('admin', 'owner')\n  ) INTO v_is_authorized;\n\n  IF NOT v_is_authorized THEN\n    RAISE EXCEPTION 'You do not have permission to manage this agency';\n  END IF;\n\n  -- Check if user is the agency owner\n  IF EXISTS (\n    SELECT 1 FROM public.agencies\n    WHERE id = p_agency\n    AND owner_user_id = p_user\n  ) THEN\n    RAISE EXCEPTION 'Cannot remove the agency owner';\n  END IF;\n\n  -- Get the user's role\n  SELECT role INTO v_user_role\n  FROM public.user_agencies\n  WHERE user_id = p_user\n  AND agency_id = p_agency;\n\n  -- If user is admin, check if they're the last admin\n  IF v_user_role IN ('admin', 'owner') THEN\n    SELECT COUNT(*)::integer INTO v_admin_count\n    FROM public.user_agencies\n    WHERE agency_id = p_agency\n    AND role IN ('admin', 'owner')\n    AND user_id != p_user;\n\n    -- Also check if there's an owner in agencies table\n    IF EXISTS (\n      SELECT 1 FROM public.agencies\n      WHERE id = p_agency\n      AND owner_user_id IS NOT NULL\n      AND owner_user_id != p_user\n    ) THEN\n      v_admin_count := v_admin_count + 1;\n    END IF;\n\n    IF v_admin_count = 0 THEN\n      RAISE EXCEPTION 'Cannot remove the last admin from the agency';\n    END IF;\n  END IF;\n\n  -- Remove the membership\n  DELETE FROM public.user_agencies\n  WHERE user_id = p_user\n  AND agency_id = p_agency;\nEND;\n$$;\n\n-- Step 6: Create convenience RPC to add user by email\nCREATE OR REPLACE FUNCTION public.add_user_to_agency_by_email(\n  p_agency uuid,\n  p_email text,\n  p_role text DEFAULT 'agent'\n)\nRETURNS json\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = ''\nAS $$\nDECLARE\n  v_user_id uuid;\n  v_user_name text;\nBEGIN\n  -- Get user ID from email\n  v_user_id := public.get_user_id_by_email(p_email);\n\n  IF v_user_id IS NULL THEN\n    RETURN json_build_object(\n      'success', false,\n      'error', 'User not found with that email'\n    );\n  END IF;\n\n  -- Get user name from profiles\n  SELECT name INTO v_user_name\n  FROM public.profiles\n  WHERE id = v_user_id;\n\n  -- Try to add to agency\n  BEGIN\n    PERFORM public.add_user_to_agency(p_agency, v_user_id, p_role);\n\n    RETURN json_build_object(\n      'success', true,\n      'user_id', v_user_id,\n      'name', v_user_name\n    );\n  EXCEPTION\n    WHEN OTHERS THEN\n      RETURN json_build_object(\n        'success', false,\n        'error', SQLERRM\n      );\n  END;\nEND;\n$$;\n\n-- Step 7: Revoke all public access first\nREVOKE EXECUTE ON FUNCTION public.get_user_id_by_email(text) FROM PUBLIC;\nREVOKE EXECUTE ON FUNCTION public.add_user_to_agency(uuid, uuid, text) FROM PUBLIC;\nREVOKE EXECUTE ON FUNCTION public.remove_user_from_agency(uuid, uuid) FROM PUBLIC;\nREVOKE EXECUTE ON FUNCTION public.add_user_to_agency_by_email(uuid, text, text) FROM PUBLIC;\n\n-- Step 8: Grant execute permissions to authenticated users only\nGRANT EXECUTE ON FUNCTION public.get_user_id_by_email(text) TO authenticated;\nGRANT EXECUTE ON FUNCTION public.add_user_to_agency(uuid, uuid, text) TO authenticated;\nGRANT EXECUTE ON FUNCTION public.remove_user_from_agency(uuid, uuid) TO authenticated;\nGRANT EXECUTE ON FUNCTION public.add_user_to_agency_by_email(uuid, text, text) TO authenticated;\n\n-- Step 9: Add helpful comments\nCOMMENT ON FUNCTION public.get_user_id_by_email IS 'Looks up user ID by email from profiles or auth.identities';\nCOMMENT ON FUNCTION public.add_user_to_agency IS 'Adds or updates a user in an agency with permission checks';\nCOMMENT ON FUNCTION public.remove_user_from_agency IS 'Removes a user from an agency with last admin protection';\nCOMMENT ON FUNCTION public.add_user_to_agency_by_email IS 'Convenience function to add user to agency by email';\n\n-- Step 10: Verify the functions are created\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM pg_proc p\n    JOIN pg_namespace n ON n.oid = p.pronamespace\n    WHERE n.nspname = 'public'\n    AND p.proname = 'add_user_to_agency_by_email'\n  ) THEN\n    RAISE WARNING 'Function add_user_to_agency_by_email was not created successfully';\n  ELSE\n    RAISE NOTICE 'All agency member functions created successfully';\n  END IF;\nEND $$;"
}